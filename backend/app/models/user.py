"""User model for authentication and authorization."""

from datetime import datetime
from enum import Enum
from typing import List, Optional

from sqlalchemy import Boolean, Column, DateTime, Enum as SQLEnum, String, Text
from sqlalchemy.orm import relationship

from app.models.base import BaseModel


class UserRole(str, Enum):
    """User role enumeration."""
    ADMIN = "admin"
    USER = "user"
    PREMIUM = "premium"


class UserStatus(str, Enum):
    """User status enumeration."""
    ACTIVE = "active"
    INACTIVE = "inactive"
    SUSPENDED = "suspended"
    PENDING = "pending"


class User(BaseModel):
    """User model for authentication and profile management."""
    
    __tablename__ = "users"
    
    # Authentication fields
    email = Column(
        String(255),
        unique=True,
        index=True,
        nullable=False,
        doc="User email address (unique)"
    )
    
    hashed_password = Column(
        String(255),
        nullable=False,
        doc="Bcrypt hashed password"
    )
    
    # Profile fields
    full_name = Column(
        String(255),
        nullable=True,
        doc="User's full name"
    )
    
    username = Column(
        String(100),
        unique=True,
        index=True,
        nullable=True,
        doc="Optional unique username"
    )
    
    # Status and permissions
    is_active = Column(
        Boolean,
        default=True,
        nullable=False,
        doc="Whether the user account is active"
    )
    
    is_verified = Column(
        Boolean,
        default=False,
        nullable=False,
        doc="Whether the user has verified their email"
    )
    
    role = Column(
        SQLEnum(UserRole),
        default=UserRole.USER,
        nullable=False,
        doc="User role for authorization"
    )
    
    status = Column(
        SQLEnum(UserStatus),
        default=UserStatus.PENDING,
        nullable=False,
        doc="Current user status"
    )
    
    # API access
    api_key = Column(
        String(255),
        unique=True,
        index=True,
        nullable=True,
        doc="API key for programmatic access"
    )
    
    # Timestamps for security
    last_login_at = Column(
        DateTime(timezone=True),
        nullable=True,
        doc="Timestamp of last successful login"
    )
    
    email_verified_at = Column(
        DateTime(timezone=True),
        nullable=True,
        doc="Timestamp when email was verified"
    )
    
    password_changed_at = Column(
        DateTime(timezone=True),
        nullable=True,
        doc="Timestamp when password was last changed"
    )
    
    # Usage limits and quotas
    max_ideas = Column(
        Integer,
        default=100,
        nullable=False,
        doc="Maximum number of ideas user can create"
    )
    
    max_dossiers = Column(
        Integer,
        default=50,
        nullable=False,
        doc="Maximum number of dossiers user can generate"
    )
    
    # User preferences
    preferences = Column(
        Text,
        nullable=True,
        doc="JSON string of user preferences"
    )
    
    # Relationships
    ideas = relationship(
        "Idea",
        back_populates="owner",
        cascade="all, delete-orphan",
        doc="Ideas created by this user"
    )
    
    dossiers = relationship(
        "Dossier",
        back_populates="owner",
        cascade="all, delete-orphan",
        doc="Dossiers generated by this user"
    )
    
    audit_logs = relationship(
        "AuditLog",
        back_populates="user",
        doc="Audit logs for this user"
    )
    
    @property
    def is_admin(self) -> bool:
        """Check if user has admin role."""
        return self.role == UserRole.ADMIN
    
    @property
    def is_premium(self) -> bool:
        """Check if user has premium role."""
        return self.role in [UserRole.PREMIUM, UserRole.ADMIN]
    
    @property
    def can_create_ideas(self) -> bool:
        """Check if user can create more ideas."""
        return len(self.ideas) < self.max_ideas
    
    @property
    def can_generate_dossiers(self) -> bool:
        """Check if user can generate more dossiers."""
        return len(self.dossiers) < self.max_dossiers
    
    def update_last_login(self) -> None:
        """Update last login timestamp."""
        self.last_login_at = datetime.utcnow()
    
    def verify_email(self) -> None:
        """Mark email as verified."""
        self.is_verified = True
        self.email_verified_at = datetime.utcnow()
        if self.status == UserStatus.PENDING:
            self.status = UserStatus.ACTIVE
    
    def activate(self) -> None:
        """Activate user account."""
        self.is_active = True
        self.status = UserStatus.ACTIVE
    
    def deactivate(self) -> None:
        """Deactivate user account."""
        self.is_active = False
        self.status = UserStatus.INACTIVE
    
    def suspend(self) -> None:
        """Suspend user account."""
        self.is_active = False
        self.status = UserStatus.SUSPENDED
    
    def __repr__(self) -> str:
        """String representation of user."""
        return f"<User(id={self.id}, email='{self.email}', role='{self.role}')>"