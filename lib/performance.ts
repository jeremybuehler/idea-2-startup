/**
 * Performance optimization utilities
 * Includes async ZIP generation, memoization helpers, and bundle optimization
 */

import JSZip from 'jszip';
import { Dossier } from '@/types';
import { sanitizeProjectSlug } from './security';

/* eslint-disable no-unused-vars */
type AnyFunction = (...args: any[]) => any;
type ProgressHandler = (progress: number) => void;
type MemoKeyGenerator<T extends AnyFunction> = (...fnArgs: Parameters<T>) => string;
/* eslint-enable no-unused-vars */

/**
 * Async ZIP generation to prevent UI blocking
 */
export class AsyncZipGenerator {
  /**
   * Generate repository ZIP file asynchronously
   */
  static async generateRepoZip(
    slug: string,
    dossier: Pick<Dossier, 'prd' | 'runbook' | 'repo' | 'api'>,
    onProgress?: ProgressHandler
  ): Promise<Blob> {
    const safeSlug = sanitizeProjectSlug(slug);
    const zip = new JSZip();
    
    // Track progress
    let completed = 0;
    const totalSteps = 12;
    
    const updateProgress = () => {
      completed++;
      if (onProgress) {
        onProgress((completed / totalSteps) * 100);
      }
    };

    try {
      // Frontend package.json
      zip.file(`${safeSlug}/package.json`, JSON.stringify({
        name: safeSlug,
        version: '0.1.0',
        private: true,
        scripts: {
          dev: 'next dev',
          build: 'next build',
          start: 'next start',
          lint: 'next lint',
          test: 'jest',
          'test:watch': 'jest --watch'
        },
        dependencies: {
          'next': '^14.2.0',
          'react': '^18.3.0',
          'react-dom': '^18.3.0',
          'typescript': '^5.4.0'
        }
      }, null, 2));
      updateProgress();

      // Next.js configuration
      zip.file(`${safeSlug}/next.config.js`, `/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    optimizePackageImports: ['lucide-react', 'framer-motion']
  }
}

module.exports = nextConfig`);
      updateProgress();

      // TypeScript configuration
      zip.file(`${safeSlug}/tsconfig.json`, JSON.stringify({
        compilerOptions: {
          target: 'es5',
          lib: ['dom', 'dom.iterable', 'esnext'],
          allowJs: true,
          skipLibCheck: true,
          strict: true,
          forceConsistentCasingInFileNames: true,
          noEmit: true,
          esModuleInterop: true,
          module: 'esnext',
          moduleResolution: 'bundler',
          resolveJsonModule: true,
          isolatedModules: true,
          jsx: 'preserve',
          incremental: true,
          plugins: [{ name: 'next' }],
          paths: { '@/*': ['./*'] }
        },
        include: ['next-env.d.ts', '**/*.ts', '**/*.tsx', '.next/types/**/*.ts'],
        exclude: ['node_modules']
      }, null, 2));
      updateProgress();

      // Documentation files
      zip.file(`${safeSlug}/docs/PRD.md`, dossier.prd || '# Product Requirements Document\n\nGenerate a dossier to populate this file.');
      updateProgress();
      
      zip.file(`${safeSlug}/ops/agents.yaml`, dossier.runbook || '# Agent Runbook\n\nGenerate a dossier to populate this file.');
      updateProgress();

      // README.md
      zip.file(`${safeSlug}/README.md`, `# ${safeSlug}

Generated by Idea-to-Startup Studio

## Getting Started

\`\`\`bash
npm install
npm run dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) to view the application.

## Project Structure

${dossier.repo || 'Project structure will be generated here.'}

## API

${dossier.api || 'API documentation will be generated here.'}
`);
      updateProgress();

      // Backend requirements
      zip.file(`${safeSlug}/server/requirements.txt`, `fastapi>=0.104.0
uvicorn>=0.24.0
pydantic>=2.5.0
python-multipart>=0.0.6`);
      updateProgress();

      // Basic backend structure
      zip.file(`${safeSlug}/server/main.py`, dossier.api || `from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Hello World"}
`);
      updateProgress();

      // Environment files
      zip.file(`${safeSlug}/.env.example`, `# Application Configuration
NEXT_PUBLIC_API_BASE=http://localhost:8000
NEXT_PUBLIC_USE_LIVE=false

# Development
NODE_ENV=development
`);
      updateProgress();

      // Basic layout structure
      zip.file(`${safeSlug}/app/layout.tsx`, `export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}`);
      updateProgress();

      zip.file(`${safeSlug}/app/page.tsx`, `export default function Home() {
  return (
    <main>
      <h1>${safeSlug}</h1>
      <p>Your startup idea, ready to build!</p>
    </main>
  )
}`);
      updateProgress();

      // Generate final ZIP
      const blob = await zip.generateAsync({ 
        type: 'blob',
        compression: 'DEFLATE',
        compressionOptions: { level: 6 }
      });
      updateProgress();

      return blob;
    } catch (error) {
      console.error('ZIP generation failed:', error);
      throw error;
    }
  }
}

/**
 * Memoization helpers for performance optimization
 */
export class MemoizationHelper {
  private static cache = new Map<string, any>();
  private static maxSize = 100;

  /**
   * Memoize expensive computations with TTL
   */
  static memoize<T extends AnyFunction>(
    fn: T,
    keyGenerator: MemoKeyGenerator<T>,
    ttl: number = 5 * 60 * 1000 // 5 minutes default
  ): T {
    // eslint-disable-next-line no-unused-vars
    return ((...fnArgs: Parameters<T>) => {
      const key = keyGenerator(...fnArgs);
      const cached = this.cache.get(key);
      
      if (cached && Date.now() - cached.timestamp < ttl) {
        return cached.value;
      }
      
      const result = fn(...fnArgs);
      
      // Prevent cache from growing too large
      if (this.cache.size >= this.maxSize) {
        const firstKey = this.cache.keys().next().value;
        if (firstKey) {
          this.cache.delete(firstKey);
        }
      }
      
      this.cache.set(key, {
        value: result,
        timestamp: Date.now()
      });
      
      return result;
    }) as T;
  }

  /**
   * Clear memoization cache
   */
  static clearCache(): void {
    this.cache.clear();
  }
}

/**
 * Performance monitoring utilities
 */
export class PerformanceMonitor {
  private static marks = new Map<string, number>();
  
  /**
   * Start performance measurement
   */
  static mark(name: string): void {
    this.marks.set(name, performance.now());
  }
  
  /**
   * End performance measurement and get duration
   */
  static measure(name: string): number {
    const start = this.marks.get(name);
    if (!start) {
      console.warn(`Performance mark '${name}' not found`);
      return 0;
    }
    
    const duration = performance.now() - start;
    this.marks.delete(name);
    
    // Log slow operations in development
    if (process.env.NODE_ENV === 'development' && duration > 100) {
      console.warn(`Slow operation detected: ${name} took ${duration.toFixed(2)}ms`);
    }
    
    return duration;
  }
}

/**
 * Bundle size optimization helpers
 */
export const OptimizationHelpers = {
  /**
   * Lazy load heavy components
   */
  lazyImport: <T extends React.ComponentType<any>>(importFn: () => Promise<{ default: T }>) => {
    return React.lazy(() => importFn());
  },

  /**
   * Debounce function for performance
   */
  debounce: <T extends AnyFunction>(
    func: T,
    wait: number
  ): T => {
    let timeout: NodeJS.Timeout;
    // eslint-disable-next-line no-unused-vars
    return ((...fnArgs: Parameters<T>) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...fnArgs), wait);
    }) as T;
  },

  /**
   * Throttle function for performance
   */
  throttle: <T extends AnyFunction>(
    func: T,
    limit: number
  ): T => {
    let inThrottle: boolean;
    // eslint-disable-next-line no-unused-vars
    return ((...fnArgs: Parameters<T>) => {
      if (!inThrottle) {
        func(...fnArgs);
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
      }
    }) as T;
  }
};

// Import React for lazy loading
import React from 'react';
